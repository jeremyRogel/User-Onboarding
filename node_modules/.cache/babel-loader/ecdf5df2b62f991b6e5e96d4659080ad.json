{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyrogel/Documents/git/form-builder/src/components/Form.js\";\nimport React from 'react';\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nconst Forms = ({\n  values,\n  errors,\n  touched\n}) => {\n  return React.createElement(\"div\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    palceholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, errors.password), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Terms of Service\", React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"termsOfService\",\n    checked: values.termsOfService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Submit\")), users.map(user => React.createElement(\"ul\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \" Name: \", user.name), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \" Password: \", user.password), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \" E-Mail: \", user.email))));\n};\n\nconst FormikForm = withFormik({\n  mapPropsToValues({\n    name,\n    email,\n    password,\n    termsOfService\n  }) {\n    return {\n      name: name || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      termsOfService: termsOfService || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"You must put a name, dude\"),\n    email: Yup.string().required(\"input that email, please!\"),\n    password: Yup.string().required(\"Come on! You need to put in a password\")\n  }),\n\n  handleSubmit(values, {}) {\n    axios.post(\" https://reqres.in/api/users\", values).then(res => {\n      console.log(res);\n    });\n  }\n\n})(Forms);\nconsole.log(\"This is the HOC\", FormikForm);\nexport default FormikForm;","map":{"version":3,"sources":["/Users/jeremyrogel/Documents/git/form-builder/src/components/Form.js"],"names":["React","withFormik","Form","Field","Yup","axios","Forms","values","errors","touched","name","email","password","termsOfService","users","map","user","id","FormikForm","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","post","then","res","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\n\nconst Forms = ({ values, errors, touched }) => {\n    return (\n       \n       <div className=\"form\">\n        <Form>\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            {touched.name && errors.name && (\n          <p className=\"error\">{errors.name}</p>\n        )}\n            <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n            {touched.email && errors.email && (\n          <p className=\"error\">{errors.email}</p>\n        )}\n            <Field type=\"password\" name=\"password\" palceholder=\"Password\" />\n            {touched.password && errors.password && (\n          <p className=\"error\">{errors.password}</p>\n        )}\n            \n            <label>\n                Terms of Service\n                <Field\n                    type=\"checkbox\"\n                    name=\"termsOfService\"\n                    checked={values.termsOfService}\n                />\n            </label>\n            <button>Submit</button>\n        </Form>\n\n        {users.map(user => (\n        <ul key={user.id}>\n          <li> Name: {user.name}</li>\n          <li> Password: {user.password}</li>\n          <li> E-Mail: {user.email}</li>\n        </ul>\n      ))}\n      \n       </div>\n     \n    );\n};\n\n\n    const FormikForm = withFormik({\n        mapPropsToValues({ name, email, password, termsOfService }) {\n            return {\n                name: name || \"\",\n                email: email || \"\",\n                password: password || \"\",\n                termsOfService: termsOfService || false,\n            };\n        },\n        validationSchema: Yup.object().shape({\n            name: Yup.string().required(\"You must put a name, dude\"),\n            email: Yup.string().required(\"input that email, please!\"),\n            password:Yup.string().required(\"Come on! You need to put in a password\")\n        }),\n\n        handleSubmit(values, {}) {\n            axios.post(\" https://reqres.in/api/users\", values).then(res => {\n                console.log(res);\n            });\n        }\n    })(Forms);\n    console.log(\"This is the HOC\", FormikForm)\n    export default FormikForm;"]},"metadata":{},"sourceType":"module"}