{"ast":null,"code":"import _slicedToArray from \"/Users/jeremyrogel/Documents/git/form-builder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jeremyrogel/Documents/git/form-builder/src/components/Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nconst Forms = ({\n  values,\n  errors,\n  touched,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  useEffect(() => {\n    if (status) {\n      setUsers([...users, status]);\n    }\n  }, [status]);\n  return React.createElement(\"div\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    palceholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, errors.password), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Terms of Service\", React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"termsOfService\",\n    checked: values.termsOfService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Submit\")), users.map(user, index => React.createElement(\"section\", {\n    className: \"user-card\",\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \" Name: \", user.name), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \" Password: \", user.password), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \" E-Mail: \", user.email))));\n};\n\nconst FormikForm = withFormik({\n  mapPropsToValues({\n    name,\n    email,\n    password,\n    termsOfService\n  }) {\n    return {\n      name: name || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      termsOfService: termsOfService || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"You must put a name, dude\"),\n    email: Yup.string().required(\"input that email, please!\"),\n    password: Yup.string().required(\"Come on! You need to put in a password\")\n  }),\n\n  handleSubmit(values, {}) {\n    axios.post(\" https://reqres.in/api/users\", values).then(res => {\n      console.log(res);\n    });\n  }\n\n})(Forms);\nconsole.log(\"This is the HOC\", FormikForm);\nexport default FormikForm;","map":{"version":3,"sources":["/Users/jeremyrogel/Documents/git/form-builder/src/components/Form.js"],"names":["React","useState","useEffect","withFormik","Form","Field","Yup","axios","Forms","values","errors","touched","status","users","setUsers","name","email","password","termsOfService","map","user","index","FormikForm","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","post","then","res","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\n\nconst Forms = ({ values, errors, touched, status }) => {\n    const [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        if(status) {\n            setUsers([...users, status])\n        }\n    }, [status]);\n    return (\n       \n       <div className=\"form\">\n        <Form>\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            {touched.name && errors.name && (\n          <p className=\"error\">{errors.name}</p>\n        )}\n            <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n            {touched.email && errors.email && (\n          <p className=\"error\">{errors.email}</p>\n        )}\n            <Field type=\"password\" name=\"password\" palceholder=\"Password\" />\n            {touched.password && errors.password && (\n          <p className=\"error\">{errors.password}</p>\n        )}\n            \n            <label>\n                Terms of Service\n                <Field\n                    type=\"checkbox\"\n                    name=\"termsOfService\"\n                    checked={values.termsOfService}\n                />\n            </label>\n            <button>Submit</button>\n        </Form>\n        \n\n        {users.map(user, index => (\n        <section className = \"user-card\" key={index}>\n          <h3> Name: {user.name}</h3>\n          <h3> Password: {user.password}</h3>\n          <h3> E-Mail: {user.email}</h3>\n          </section>\n      ))}\n\n       </div>\n     \n    );\n};\n\n\n    const FormikForm = withFormik({\n        mapPropsToValues({ name, email, password, termsOfService }) {\n            return {\n                name: name || \"\",\n                email: email || \"\",\n                password: password || \"\",\n                termsOfService: termsOfService || false,\n            };\n        },\n        validationSchema: Yup.object().shape({\n            name: Yup.string().required(\"You must put a name, dude\"),\n            email: Yup.string().required(\"input that email, please!\"),\n            password:Yup.string().required(\"Come on! You need to put in a password\")\n        }),\n\n        handleSubmit(values, {}) {\n            axios.post(\" https://reqres.in/api/users\", values).then(res => {\n                console.log(res);\n            });\n        }\n    })(Forms);\n    console.log(\"This is the HOC\", FormikForm)\n    export default FormikForm;"]},"metadata":{},"sourceType":"module"}